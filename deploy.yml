name: Build & Deploy to Hostinger

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      TARGET_DIR: ${{ secrets.TARGET_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend deps & build
        run: |
          npm ci
          npm run build

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Rsync project to Hostinger
        run: |
          rsync -avz -e "ssh -p ${{ secrets.SSH_PORT }}" --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='storage' \
            --exclude='.github' \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.TARGET_DIR }}/

      - name: Run remote artisan & deploy tasks
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          cd $TARGET_DIR

          # Optional: composer on server if available
          # composer install --no-dev --optimize-autoloader || true

          # Clear & warm caches
          php artisan route:cache || true
          php artisan config:cache || true
          php artisan view:clear || true
          php artisan cache:clear || true

          # Ensure storage symlink exists in public_html (adjust paths for your setup)
          if [ ! -L ../public_html/storage ]; then
            ln -s $TARGET_DIR/storage/app/public ../public_html/storage || true
          fi

          # Copy built frontend assets into public_html/build if required
          if [ -d public/build ]; then
            mkdir -p ../public_html/build
            rsync -av --delete public/build/ ../public_html/build/
          fi

          # Set permissive permissions where allowed
          chmod -R 755 storage bootstrap/cache || true

          EOF
